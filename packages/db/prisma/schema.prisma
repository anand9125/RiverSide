generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  rooms      Room[]        @relation("UserRooms")
  participants Participant[]
}

model Room {
  id           String     @id @default(uuid())
  title        String?
  createdAt    DateTime   @default(now())
  scheduledFor DateTime?
  isActive     Boolean    @default(true)

  hostUserId String?
  hostUser   User?        @relation("UserRooms", fields: [hostUserId], references: [id])  //Foreign key to the User who created it

  participants Participant[]  //Users/guests who joined this room

  recordings   Recording[]    //All uploaded media linked to this room
}

model Participant {
  id         String     @id @default(uuid())
  displayName String
  joinedAt   DateTime   @default(now())
  leftAt     DateTime?

  roomId     String
  room       Room       @relation(fields: [roomId], references: [id])  //	Which room this participant joined

  userId     String?   //Nullable — allows guests who aren’t registered
  user       User?      @relation(fields: [userId], references: [id])

  recordings Recording[]  //Tracks this participant's uploads
}

model Recording {
  id              String    @id @default(uuid())
  fileUrl         String     //S3 path or URL to file
  fileType        FileType
  mimeType        String?   //video/webm, audio/wav, etc
  durationSeconds Int?
  uploadedAt      DateTime  @default(now())

  participantId String       //Who recorded the file
  participant   Participant @relation(fields: [participantId], references: [id])

  roomId        String       //Which room it belongs to
  room          Room        @relation(fields: [roomId], references: [id])
}

enum FileType {
  audio
  video
}
